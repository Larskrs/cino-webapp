generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== EXISTING AUTH MODELS ==========

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? 
  access_token             String? 
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? 
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  banner            String?
  status            String?
  location          String?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  files             File[]
  memberships       ProjectMember[]
  postNotes         PostNote[]
  postNoteRatings   PostNoteRating[]

  followers  Follower[] @relation("UserFollowers")
  following  Follower[] @relation("UserFollowing")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  
  body        String
  attachments Json?    // Links of attachments
  hashtags  PostHashtag[]

  // Self-relation for replies
  parentId    Int?        // The post this is replying to
  parent      Post?       @relation("PostReplies", fields: [parentId], references: [id])
  replies     Post[]      @relation("PostReplies") // Replies to this post
  notes       PostNote[]       // âœ… Added reverse relation


  @@index([id])
}
model PostNote {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  body        String   // The contextual explanation
  sources     Json?    // Optional list of URLs or references

  // Computed later via aggregation
  helpfulScore Float?  @default(0)
  visible      Boolean @default(false)

  ratings      PostNoteRating[]
}

model PostNoteRating {
  id        String   @id @default(cuid())
  noteId    String
  note      PostNote     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    PostNoteRatingValue
  createdAt DateTime @default(now())

  @@unique([noteId, userId]) // Prevent duplicate ratings
}

enum PostNoteRatingValue {
  HELPFUL
  SOMEWHAT_HELPFUL
  NOT_HELPFUL
}

model Hashtag {
  tag       String      @id              // lowercase hashtag text
  createdAt DateTime  @default(now())

  posts     PostHashtag[]
}

model PostHashtag {
  postId    Int
  tag       String
  createdAt DateTime  @default(now())  // store when the hashtag was used

  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag   Hashtag   @relation(fields: [tag], references: [tag], onDelete: Cascade)

  @@id([postId, tag]) 
  @@index([tag, createdAt])   // fast trending queries by day
  @@index([postId])
}

model Follower {
  id         String   @id @default(cuid())
  userId     String
  followerId String

  user       User     @relation("UserFollowers", fields: [userId], references: [id])
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])

  @@unique([userId, followerId])
  @@index([followerId])
}

// ========== NEW PROJECT MODELS ==========

model Project {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  image       String?
  color       String?

  // Relations
  members     ProjectMember[]
  files       File[]
  scripts     Script[]
  labels      Label[]
  boards      Board[]
}

enum ProjectRole {
    admin
    manager
    member
    guest
    banned
}
model ProjectMember {
  id        String    @id @default(cuid())
  role      ProjectRole @default(banned)
  userId    String
  projectId String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Prevent duplicates
}

// ========== FILE SYSTEM MODELS ==========

model File {
  id          String    @id @default(cuid())
  name        String
  isDirectory Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storage     String    

  // data
  size        BigInt    @default(0)   

  // Hierarchy
  parentId    String?
  parent      File?     @relation("FileHierarchy", fields: [parentId], references: [id])
  children    File[]    @relation("FileHierarchy")

  // Project association
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Creator
  createdById String
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Labels
  labels      FileLabel[]
}


model Board {
  id          String    @id @default(cuid())
  name        String
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation to Project (owner)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  // Parent board (for nested boards)
  parentId    String? 
  parent      Board?    @relation("BoardChildren", fields: [parentId], references: [id])
  children    Board[]   @relation("BoardChildren")

  // Cards on this board
  cards       BoardCard[]
}

model BoardCard {
  id          String   @id @default(cuid())
  title       String
  content     String?
  type        String?  // could be 'text', 'image', 'link', etc.
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  x           Float?
  y           Float?
  width       Float?
  height      Float?

  // Relationship to the board
  boardId     String
  board       Board     @relation(fields: [boardId], references: [id])
}

// ========== SCRIPT + VERSIONING ==========

model Script {
  id          String           @id @default(cuid())
  title       String
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  versions    ScriptVersion[]
  labels      ScriptLabel[]
  archived    Boolean
}

model ScriptVersion {
  id        String   @id @default(cuid())
  version   Int
  content   String
  createdAt DateTime @default(now())

  scriptId  String
  script    Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  scenes    Scene[]  // <-- make sure this exists

  @@unique([scriptId, version])
}

model Scene {
  id          String   @id @default(cuid())
  versionId   String?
  version     ScriptVersion?   @relation(fields: [versionId], references: [id], onDelete: Cascade)

  sceneNumber Int
  title       String
  orderIndex  Int

  lines       Line[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Line {
  id        String   @id @default(cuid())
  sceneId   String
  scene     Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  type      String
  content   String
  orderIndex Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========== LABELING SYSTEM ==========

model Label {
  id        String   @id @default(cuid())
  tag       String
  color     String   // Hex or CSS color
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Connections
  fileLabels   FileLabel[]
  scriptLabels ScriptLabel[]
}

model FileLabel {
  fileId  String
  labelId String
  file    File  @relation(fields: [fileId], references: [id], onDelete: Cascade)
  label   Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([fileId, labelId])
}

model ScriptLabel {
  scriptId String
  labelId  String
  script   Script @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  label    Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([scriptId, labelId])
}